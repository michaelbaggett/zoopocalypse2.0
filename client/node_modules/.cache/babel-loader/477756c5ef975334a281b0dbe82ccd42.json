{"ast":null,"code":"import _toConsumableArray from \"/Users/michaelbaggett/Desktop/lulz/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/michaelbaggett/Desktop/lulz/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelbaggett/Desktop/lulz/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaelbaggett/Desktop/lulz/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaelbaggett/Desktop/lulz/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelbaggett/Desktop/lulz/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaelbaggett/Desktop/lulz/client/src/components/AnimalCard/index.js\";\nimport React, { Component } from \"react\";\nimport bar from \"../../images/cageBars.png\";\nexport var AnimalCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AnimalCard, _Component);\n\n  function AnimalCard(props) {\n    var _this;\n\n    _classCallCheck(this, AnimalCard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimalCard).call(this, props));\n\n    _this.handleHintButton = function (event) {\n      event.preventDefault(); // Checks if the word is complete\n\n      if (_this.state.isComplete) {\n        // if yes, then sets the state to the below\n        _this.setState({\n          hint: \"\"\n        });\n      } else {\n        // if no, then sets the state to the below\n        _this.setState({\n          hint: \"Hint: \" + '\"' + _this.props.animal[_this.state.targetPosition].toUpperCase() + '\"'\n        });\n      }\n    };\n\n    _this.handleResetButton = function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        barsVisible: _this.props.animal.split(\"\").map(function (e) {\n          return true;\n        }),\n        name: _this.props.animal.split(\"\").map(function (e) {\n          return \"_ \";\n        }),\n        letters: [],\n        guessLog: [],\n        targetPosition: 0,\n        message: \"\",\n        hint: \"\",\n        isComplete: false\n      });\n    };\n\n    _this.onKeyUp = function (event) {\n      // This makes sure that the letter entered is a letter and not something else. It takes in the key entered and only returns when a letter is passed in.\n      var isLetter = function isLetter(prop) {\n        var alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n        var letter;\n        alphabet.forEach(function (e) {\n          if (prop === e) {\n            letter = prop;\n          }\n        });\n        return letter;\n      };\n\n      var word = _this.props.animal; // word to guess\n\n      var name = _toConsumableArray(_this.state.name);\n\n      var letters = _toConsumableArray(_this.state.letters); // total letters guessed\n\n\n      var guessLog = [_this.state.guessLog]; // Incorrect guesses\n\n      var barsVisible = _toConsumableArray(_this.state.barsVisible); // For toggling the bar visablitiy\n\n\n      var key = isLetter(event.key.toLowerCase()); //  Event that catches the key pressed by the user\n\n      var hint = \"\"; // Checks if the key pressed matches the appropriate letter in the word\n\n      if (key === word[_this.state.targetPosition]) {\n        // If it matches\n        // Toggles the bar's visability to invisible\n        barsVisible[_this.state.targetPosition] = false; // Changes the \"_\" to the key pressed by the user\n\n        name[_this.state.targetPosition] = key; //  Checks to see if the word has been finished and sets the state for the message and is completed\n\n        if (_this.state.targetPosition === word.length - 1) {\n          _this.setState({\n            message: \"The \" + _this.props.animal + \" is free, hurray!!!\",\n            isComplete: true,\n            hint: \"\"\n          });\n        } //   Adds to the posistion accumulator so that the index position will change each time this function is run\n\n\n        _this.setState({\n          targetPosition: _this.state.targetPosition + 1,\n          barsVisible: barsVisible,\n          name: name,\n          hint: hint,\n          guessLog: []\n        });\n      } else {\n        // Attempting to eliminate repeating key presses below, unsuccessfull so far\n        // const acc = 0;\n        // guessLog.forEach(el => {\n        //   if (el === key) {\n        //     acc++;\n        //   }\n        // })\n        // console.log(acc);\n        guessLog.push(key); // adds incorrect letters to the letters arr and updates the h tag\n\n        letters.push(key); // Addes all letters typed to an array of letters\n\n        _this.setState({\n          letters: letters,\n          barsVisible: barsVisible,\n          guessLog: guessLog\n        });\n      }\n    };\n\n    console.log(props.animal[0]);\n    _this.state = {\n      barsVisible: props.animal.split(\"\").map(function (e) {\n        return true;\n      }),\n      name: props.animal.split(\"\").map(function (e) {\n        return \"_ \";\n      }),\n      letters: [],\n      incorrectLetters: [],\n      targetPosition: 0,\n      message: \"\",\n      hint: \"\",\n      isComplete: false\n    };\n    return _this;\n  }\n\n  _createClass(AnimalCard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener(\"keyup\", this.onKeyUp);\n      var barsVisible = this.state.barsVisible;\n      this.setState({\n        barsVisible: barsVisible\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"card\",\n        style: playerCardStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        style: spellMeLogoStyle,\n        src: \"../images/playLogos/spellmeBlue.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        style: imgStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"../images/\" + this.props.animal + \".png\",\n        alt: \"Animal\",\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), this.state.barsVisible.map(function (visible, index) {\n        return React.createElement(\"div\", {\n          style: {\n            width: 10,\n            height: 200,\n            position: \"absolute\",\n            top: 0,\n            opacity: visible ? 1 : 0,\n            left: (index + 0.5) * 280 / (_this2.state.barsVisible.length || 0.00001)\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: bar,\n          alt: \"Cage Bars\",\n          style: barStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }));\n      }), React.createElement(\"h1\", {\n        style: correctLetterStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, this.state.name), React.createElement(\"p\", {\n        style: guessesStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Guesses [\", this.state.guessLog, \"]\"), React.createElement(\"button\", {\n        style: buttonStyle,\n        onClick: this.handleHintButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"Get A Hint\"), React.createElement(\"button\", {\n        style: buttonStyle,\n        onClick: this.handleResetButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"Reset\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: messStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, this.state.hint), React.createElement(\"h3\", {\n        style: messStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, this.state.message))));\n    }\n  }]);\n\n  return AnimalCard;\n}(Component); // Page styles below\n\nvar spellMeLogoStyle = {\n  height: \"40px\",\n  marginTop: \"10px\",\n  borderBottom: \"3px solid #7B5D94\",\n  paddingLeft: \"70px\",\n  paddingRight: \"70px\"\n};\nvar imgStyle = {\n  height: \"175px\",\n  position: \"relative\",\n  background: \"#50D737\",\n  border: \"4px solid #444\",\n  borderRadius: \"15px\",\n  width: \"300px\",\n  margin: \"10px auto 0px\"\n};\nvar barStyle = {\n  width: \"9px\",\n  height: \"175px\",\n  position: \"absolute\",\n  zIndex: \"10\"\n};\nvar playerCardStyle = {\n  position: \"relative\",\n  textAlign: \"center\",\n  border: \"6px solid #7B5D94\",\n  margin: \"auto\",\n  marginTop: \"25px\",\n  width: \"400px\",\n  backgroundColor: \"#156369\",\n  borderRadius: \"25px\",\n  height: \"460px\"\n};\nvar correctLetterStyles = {\n  color: \"#F6E769\",\n  fontFamily: \"American Typewriter\",\n  fontSize: \"50px\",\n  paddingBottom: \"10px\",\n  borderBottom: \"3px solid #7B5D94\",\n  marginTop: \"10px\",\n  marginBottom: \"0px\"\n};\nvar buttonStyle = {\n  background: \"#7B5D94\",\n  fontSize: \"15px\",\n  borderRadius: \"10px\",\n  margin: \"10px\",\n  marginTop: \"0px\",\n  color: \"white\"\n};\nvar messStyle = {\n  color: \"#50D737\",\n  fontFamily: \"Arial\"\n};\nvar guessesStyle = {\n  color: \"white\",\n  margin: \"10px\",\n  opacity: \"0.5\"\n};\nexport default AnimalCard;","map":{"version":3,"sources":["/Users/michaelbaggett/Desktop/lulz/client/src/components/AnimalCard/index.js"],"names":["React","Component","bar","AnimalCard","props","handleHintButton","event","preventDefault","state","isComplete","setState","hint","animal","targetPosition","toUpperCase","handleResetButton","barsVisible","split","map","e","name","letters","guessLog","message","onKeyUp","isLetter","prop","alphabet","letter","forEach","word","key","toLowerCase","length","push","console","log","incorrectLetters","document","addEventListener","playerCardStyle","spellMeLogoStyle","imgStyle","height","visible","index","width","position","top","opacity","left","barStyle","correctLetterStyles","guessesStyle","buttonStyle","messStyle","marginTop","borderBottom","paddingLeft","paddingRight","background","border","borderRadius","margin","zIndex","textAlign","backgroundColor","color","fontFamily","fontSize","paddingBottom","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport bar from \"../../images/cageBars.png\";\n\nexport class AnimalCard extends Component {\n  constructor(props) {\n    super(props);\n    console.log(props.animal[0]);\n    this.state = {\n      barsVisible: props.animal.split(\"\").map(e => true),\n      name: props.animal.split(\"\").map(e => \"_ \"),\n      letters: [],\n      incorrectLetters: [],\n      targetPosition: 0,\n      message: \"\",\n      hint: \"\",\n      isComplete: false\n    };\n  }\n\n  handleHintButton = event => {\n    event.preventDefault();\n    // Checks if the word is complete\n    if (this.state.isComplete) {\n      // if yes, then sets the state to the below\n      this.setState({\n        hint: \"\"\n      });\n    } else {\n      // if no, then sets the state to the below\n      this.setState({\n        hint:\n          \"Hint: \" +\n          '\"' +\n          this.props.animal[this.state.targetPosition].toUpperCase() +\n          '\"'\n      });\n    }\n  };\n  // Resets the game so that it can be replayed\n  handleResetButton = event => {\n    event.preventDefault();\n    this.setState({\n      barsVisible: this.props.animal.split(\"\").map(e => true),\n      name: this.props.animal.split(\"\").map(e => \"_ \"),\n      letters: [],\n      guessLog: [],\n      targetPosition: 0,\n      message: \"\",\n      hint: \"\",\n      isComplete: false\n    });\n  };\n  // Captures the key pressed by the user\n  onKeyUp = event => {\n    // This makes sure that the letter entered is a letter and not something else. It takes in the key entered and only returns when a letter is passed in.\n    const isLetter = prop => {\n      const alphabet = [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\"\n      ];\n      let letter;\n      alphabet.forEach(e => {\n        if (prop === e) {\n          letter = prop;\n        }\n      });\n      return letter;\n    };\n    const word = this.props.animal; // word to guess\n    const name = [...this.state.name];\n    const letters = [...this.state.letters]; // total letters guessed\n    const guessLog = [this.state.guessLog]; // Incorrect guesses\n    const barsVisible = [...this.state.barsVisible]; // For toggling the bar visablitiy\n    const key = isLetter(event.key.toLowerCase()); //  Event that catches the key pressed by the user\n    const hint = \"\";\n    // Checks if the key pressed matches the appropriate letter in the word\n    if (key === word[this.state.targetPosition]) {\n      // If it matches\n      // Toggles the bar's visability to invisible\n      barsVisible[this.state.targetPosition] = false;\n      // Changes the \"_\" to the key pressed by the user\n      name[this.state.targetPosition] = key;\n      //  Checks to see if the word has been finished and sets the state for the message and is completed\n      if (this.state.targetPosition === word.length - 1) {\n        this.setState({\n          message: \"The \" + this.props.animal + \" is free, hurray!!!\",\n          isComplete: true,\n          hint: \"\"\n        });\n      }\n      //   Adds to the posistion accumulator so that the index position will change each time this function is run\n      this.setState({\n        targetPosition: this.state.targetPosition + 1,\n        barsVisible,\n        name,\n        hint,\n        guessLog: []\n      });\n    } else {\n      // Attempting to eliminate repeating key presses below, unsuccessfull so far\n      // const acc = 0;\n      // guessLog.forEach(el => {\n      //   if (el === key) {\n      //     acc++;\n      //   }\n      // })\n      // console.log(acc);\n      guessLog.push(key); // adds incorrect letters to the letters arr and updates the h tag\n      letters.push(key); // Addes all letters typed to an array of letters\n      this.setState({ letters, barsVisible, guessLog });\n    }\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"keyup\", this.onKeyUp);\n    const barsVisible = this.state.barsVisible;\n    this.setState({ barsVisible });\n  }\n\n  render() {\n    return (\n      <div className=\"card\" style={playerCardStyle}>\n        <div>\n          <img\n            style={spellMeLogoStyle}\n            src={\"../images/playLogos/spellmeBlue.png\"}\n          />\n        </div>\n        <div style={imgStyle}>\n          <img\n            src={\"../images/\" + this.props.animal + \".png\"}\n            alt=\"Animal\"\n            style={{ height: \"100%\" }}\n          />\n          {this.state.barsVisible.map((visible, index) => {\n            return (\n              <div\n                style={{\n                  width: 10,\n                  height: 200,\n                  position: \"absolute\",\n                  top: 0,\n                  opacity: visible ? 1 : 0,\n                  left:\n                    ((index + 0.5) * 280) /\n                    (this.state.barsVisible.length || 0.00001)\n                }}\n              >\n                <img src={bar} alt=\"Cage Bars\" style={barStyle} />\n              </div>\n            );\n          })}\n          <h1 style={correctLetterStyles}>{this.state.name}</h1>\n          <p style={guessesStyle}>Guesses [{this.state.guessLog}]</p>\n\n          <button style={buttonStyle} onClick={this.handleHintButton}>\n            Get A Hint\n          </button>\n          <button style={buttonStyle} onClick={this.handleResetButton}>\n            Reset\n          </button>\n\n          <div>\n            <h3 style={messStyle}>{this.state.hint}</h3>\n            <h3 style={messStyle}>{this.state.message}</h3>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n// Page styles below\nconst spellMeLogoStyle = {\n  height: \"40px\",\n  marginTop: \"10px\",\n  borderBottom: \"3px solid #7B5D94\",\n  paddingLeft: \"70px\",\n  paddingRight: \"70px\"\n};\nconst imgStyle = {\n  height: \"175px\",\n  position: \"relative\",\n  background: \"#50D737\",\n  border: \"4px solid #444\",\n  borderRadius: \"15px\",\n  width: \"300px\",\n  margin: \"10px auto 0px\"\n};\nconst barStyle = {\n  width: \"9px\",\n  height: \"175px\",\n  position: \"absolute\",\n  zIndex: \"10\"\n};\nconst playerCardStyle = {\n  position: \"relative\",\n  textAlign: \"center\",\n  border: \"6px solid #7B5D94\",\n  margin: \"auto\",\n  marginTop: \"25px\",\n  width: \"400px\",\n  backgroundColor: \"#156369\",\n  borderRadius: \"25px\",\n  height: \"460px\"\n};\nconst correctLetterStyles = {\n  color: \"#F6E769\",\n  fontFamily: \"American Typewriter\",\n  fontSize: \"50px\",\n  paddingBottom: \"10px\",\n  borderBottom: \"3px solid #7B5D94\",\n  marginTop: \"10px\",\n  marginBottom: \"0px\"\n};\nconst buttonStyle = {\n  background: \"#7B5D94\",\n  fontSize: \"15px\",\n  borderRadius: \"10px\",\n  margin: \"10px\",\n  marginTop: \"0px\",\n  color: \"white\"\n};\nconst messStyle = {\n  color: \"#50D737\",\n  fontFamily: \"Arial\"\n};\nconst guessesStyle = {\n  color: \"white\",\n  margin: \"10px\",\n  opacity: \"0.5\"\n};\n\nexport default AnimalCard;\n"]},"metadata":{},"sourceType":"module"}